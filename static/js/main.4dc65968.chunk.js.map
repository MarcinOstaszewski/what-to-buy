{"version":3,"sources":["firebase.js","containers/ShowList/ShowList.js","App.js","serviceWorker.js","index.js","containers/ShowList/ShowList.module.css"],"names":["firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","fbDB","ShowList","auth","GoogleAuthProvider","state","zakupy","kategorie","dbRef","swapProduct","e","name","target","dataset","reverseValue","parseInt","value","ref","set","this","on","snap","snapValue","val","setState","console","log","err","code","doKupienia","naZapas","Object","keys","forEach","i","el","product","key","data-name","onClick","data-value","push","className","style","list","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"kTAcAA,gBAVe,CACXC,OAAQ,0CACRC,WAAY,oCACZC,YAAa,2CACbC,UAAW,oBACXC,cAAe,gCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAGnB,IAAMC,EAAOT,aCsDEU,GDpDI,IAAIC,OAAKC,mB,4MCRxBC,MAAQ,CACJC,OAAQ,CACJ,wBAAwB,GAE5BC,UAAW,I,EAIfC,MAAQ,S,EAERC,YAAc,SAACC,GACX,IAAIC,EAAOD,EAAEE,OAAOC,QAAQF,KACxBG,EAAoD,IAArCC,SAASL,EAAEE,OAAOC,QAAQG,OAAe,EAAI,EAChEf,EAAKgB,IAAL,UAAY,EAAKT,MAAjB,YAA0BG,IAAQO,IAAIJ,I,kEAGrB,IAAD,OAChBb,EAAKgB,IAAL,UAAYE,KAAKX,QAASY,GAAG,SAAS,SAAAC,GAClC,IAAMC,EAAYD,EAAKE,MACvB,EAAKC,SAAL,eAAiB,EAAKhB,MAAQc,IAC9BG,QAAQC,IAAI,EAAKrB,MAAM,EAAKG,WAC7B,SAAUmB,GACTF,QAAQC,IAAIC,EAAIC,KAAMD,Q,+BAIpB,IAAD,OACDE,EAAa,GACbC,EAAU,GAgBd,OAfAC,OAAOC,KAAKb,KAAKd,MAAMC,QAAQ2B,SAAS,SAACtB,EAAMuB,GAC3C,IAAMC,EAAK,EAAK9B,MAAMC,OAAOK,GACvByB,EACF,yBAAKC,IAAKH,EACFI,YAAW3B,EACX4B,QAAS,EAAK9B,YACd+B,aAAY,EAAKnC,MAAMC,OAAOK,IACpCA,GAEFwB,EACAN,EAAWY,KAAKL,GAEhBN,EAAQW,KAAKL,MAIjB,yBAAKM,UAAWC,IAAMC,MAClB,0CACA,yBAAKF,UAAWC,IAAMd,YACjBA,GAEL,6BACA,8CACA,yBAAKa,UAAWC,IAAMb,SACjBA,Q,GAtDEe,c,MCKRC,MARf,WACE,OACE,yBAAKJ,UAAU,OACb,kBAAC,EAAD,QCIcK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,a,kBExI5BC,EAAOC,QAAU,CAAC,KAAO,uBAAuB,WAAa,6BAA6B,QAAU,6B","file":"static/js/main.4dc65968.chunk.js","sourcesContent":["import * as firebase from 'firebase';\r\nimport { auth } from 'firebase';\r\n// import { zakupy, kategorie } from './helpers/const';\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyB_psG_2HT8VisbjB3szsMjZsnlfQIS9ko\",\r\n    authDomain: \"what-to-buy-94750.firebaseapp.com\",\r\n    databaseURL: \"https://what-to-buy-94750.firebaseio.com\",\r\n    projectId: \"what-to-buy-94750\",\r\n    storageBucket: \"what-to-buy-94750.appspot.com\",\r\n    messagingSenderId: \"194092546135\",\r\n    appId: \"1:194092546135:web:7661e65a00a7f2aa390b12\",\r\n    measurementId: \"G-XWZR1H0ZMY\"\r\n};\r\nfirebase.initializeApp(config);\r\nconst fbDB = firebase.database()\r\n\r\nconst googleAuth = new auth.GoogleAuthProvider();\r\n\r\nconst addProducts = (ref, data) => {\r\n    fbDB.ref(ref).set(data);\r\n}\r\n\r\n// addProducts('zakupy', zakupy);\r\n// addProducts('kategorie', kategorie);\r\n\r\nexport {\r\n    fbDB,\r\n    firebase,\r\n    googleAuth,\r\n    addProducts,\r\n};","import React, {Component } from 'react';\r\n\r\nimport style from './ShowList.module.css';\r\n\r\nimport { \r\n    fbDB, \r\n} from '../../firebase';\r\n\r\nclass ShowList extends Component {\r\n    state = { \r\n        zakupy: {\r\n            'pobieranie danych...': true\r\n        },\r\n        kategorie: {\r\n        }\r\n    }\r\n\r\n    dbRef = 'zakupy'\r\n\r\n    swapProduct = (e) => {\r\n        let name = e.target.dataset.name;\r\n        let reverseValue = parseInt(e.target.dataset.value) === 0 ? 1 : 0;\r\n        fbDB.ref(`${this.dbRef}/${name}`).set(reverseValue);\r\n    }\r\n\r\n    componentDidMount() {       \r\n        fbDB.ref(`${this.dbRef}`).on('value', snap => {\r\n            const snapValue = snap.val()\r\n            this.setState({ [this.dbRef]: snapValue })\r\n            console.log(this.state[this.dbRef])\r\n        }, function (err) {\r\n            console.log(err.code, err)\r\n        })\r\n    }\r\n\r\n    render() { \r\n        let doKupienia = []\r\n        let naZapas = [];\r\n        Object.keys(this.state.zakupy).forEach( (name, i) => {\r\n            const el = this.state.zakupy[name];\r\n            const product = (\r\n                <div key={i}\r\n                        data-name={name}\r\n                        onClick={this.swapProduct} \r\n                        data-value={this.state.zakupy[name]}\r\n                >{name}</div>\r\n            )\r\n            if (el) {\r\n                doKupienia.push(product)\r\n            } else {\r\n                naZapas.push(product)\r\n            }\r\n        })\r\n        return ( \r\n            <div className={style.list}>\r\n                <p>Do kupienia</p>\r\n                <div className={style.doKupienia}>\r\n                    {doKupienia}\r\n                </div>\r\n                <hr/>\r\n                <p>Mo≈ºe potem</p>\r\n                <div className={style.naZapas}>\r\n                    {naZapas}\r\n                </div>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default ShowList;","import React from 'react';\n\nimport ShowList from './containers/ShowList/ShowList'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ShowList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ShowList_list__3ulZj\",\"doKupienia\":\"ShowList_doKupienia__2nMBw\",\"naZapas\":\"ShowList_naZapas__156-G\"};"],"sourceRoot":""}